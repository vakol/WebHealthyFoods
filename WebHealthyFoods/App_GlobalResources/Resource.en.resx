<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HealthyFoodCaption" xml:space="preserve">
    <value>HEALTHY FOODS</value>
  </data>
  <data name="HealthyFoodsSubCaption" xml:space="preserve">
    <value>This website can serve to those who want to prepare healthy foods.</value>
  </data>
  <data name="HealthyFoodsTitle" xml:space="preserve">
    <value>Healthy Foods</value>
  </data>
  <data name="PrepareFoods" xml:space="preserve">
    <value>Prepare Foods</value>
  </data>
  <data name="PrepareFoodsDescription" xml:space="preserve">
    <value>Food preparation, if based on a logical basis, can help to increase
an individual's personal health.</value>
  </data>
  <data name="LearnMore" xml:space="preserve">
    <value>Learn more</value>
  </data>
  <data name="GoToPage" xml:space="preserve">
    <value>Go to Page</value>
  </data>
  <data name="CheckInformation" xml:space="preserve">
    <value>Checking Food Information</value>
  </data>
  <data name="CheckInformationCaption" xml:space="preserve">
    <value>The intake of foods with an information check on their composition allows the energy value of these foods to be fully exploited.</value>
  </data>
  <data name="RelatedLinks" xml:space="preserve">
    <value>Related Links</value>
  </data>
  <data name="RelatedLinksContent" xml:space="preserve">
    <value>Best way to get healthy foods is to grow them yourself.</value>
  </data>
  <data name="WheatonLabs" xml:space="preserve">
    <value>Wheaton Labs</value>
  </data>
  <data name="AgrovoltaicTractor" xml:space="preserve">
    <value>Draft of self-sufficient photovoltaic tractor:</value>
  </data>
  <data name="HealthyFoodsEssential" xml:space="preserve">
    <value>Healthy foods are essential</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="LoggedUser" xml:space="preserve">
    <value>LoggedUser</value>
  </data>
  <data name="HealthyFoodsCopyright" xml:space="preserve">
    <value>HealthyFoods</value>
  </data>
  <data name="RecordVoice" xml:space="preserve">
    <value>Voice record</value>
  </data>
  <data name="StopRecording" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="RecWillStart" xml:space="preserve">
    <value>Press [OK] for recording and speak to microphone.</value>
  </data>
  <data name="MicrophoneError" xml:space="preserve">
    <value>Microphone access denied</value>
  </data>
  <data name="MaximumRecording" xml:space="preserve">
    <value>Maximum recording time is</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="FoodNotes" xml:space="preserve">
    <value>Insert your food notes here. When switching to another dish, notes are not kept.</value>
  </data>
  <data name="SendEmail" xml:space="preserve">
    <value>Send Email</value>
  </data>
  <data name="FoodsIngredients" xml:space="preserve">
    <value>Food ingredients</value>
  </data>
  <data name="FoodToList" xml:space="preserve">
    <value>Add to List</value>
  </data>
  <data name="AlreadyInList" xml:space="preserve">
    <value>Already in list!</value>
  </data>
  <data name="FoodList" xml:space="preserve">
    <value>List of foods:</value>
  </data>
  <data name="ContactEmail" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutContent" xml:space="preserve">
    <value>The application is intended for individuals who want to eat healthier, whether to manage a medical condition or simply for preventative purposes.</value>
  </data>
  <data name="LearnMoreContents" xml:space="preserve">
    <value>    &lt;p&gt;Information on the composition of raw materials and energy values was obtained using the AI program ChatGPT in September 2025. The information may be outdated in later years.
    Examples of queries in English for the energy value of a dish and the composition of a food are:&lt;/p&gt;
    &lt;p&gt;
        &lt;i&gt;&lt;b&gt;What is energy value of soup made by potatoes, cabbage, onion and main food: cooked potatoes with boiled egg?&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;
        Whole Meal (Soup + Potatoes + Egg)&lt;br /&gt;
        &lt;u&gt;≈ 355 kcal&lt;/u&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;i&gt;&lt;b&gt;What is the composition of the cereal roll?&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;
        &lt;u&gt;Flour&lt;/u&gt; (from one or multiple cereals)&lt;br /&gt;
        &lt;u&gt;Water&lt;/u&gt;&lt;br /&gt;
        &lt;u&gt;Yeast&lt;/u&gt; (or &lt;u&gt;sourdough&lt;/u&gt; starter)&lt;br /&gt;
        &lt;u&gt;Salt&lt;/u&gt;&lt;br /&gt;
        Sometimes &lt;u&gt;sugar&lt;/u&gt;, &lt;u&gt;milk&lt;/u&gt;, &lt;u&gt;butter&lt;/u&gt;, or &lt;u&gt;oil&lt;/u&gt; for softness and flavor&lt;br /&gt;
        Optional seeds or whole grains (&lt;u&gt;sunflower&lt;/u&gt;, &lt;u&gt;sesame&lt;/u&gt;, &lt;u&gt;flax&lt;/u&gt;, &lt;u&gt;&lt;/u&gt;, etc.) for texture and nutrition&lt;br /&gt;
        Cereal base (&lt;u&gt;corn&lt;/u&gt;, &lt;u&gt;rice&lt;/u&gt;, &lt;u&gt;wheat&lt;/u&gt;, &lt;u&gt;oat&lt;/u&gt;, or &lt;u&gt;multigrain&lt;/u&gt;)&lt;br /&gt;
        Binding agents (&lt;u&gt;syrup&lt;/u&gt;, &lt;u&gt;glucose&lt;/u&gt;, &lt;u&gt;honey&lt;/u&gt;, or &lt;u&gt;malt&lt;/u&gt;)&lt;br /&gt;
        Optional fortification (&lt;u&gt;vitamins&lt;/u&gt;, &lt;u&gt;minerals&lt;/u&gt;, &lt;u&gt;fiber&lt;/u&gt;)&lt;br /&gt;
    &lt;/p&gt;</value>
  </data>
  <data name="EmailCaption" xml:space="preserve">
    <value>Send to e-mail:</value>
  </data>
  <data name="CancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="EnterEmail" xml:space="preserve">
    <value>Please enter e-mail address.</value>
  </data>
  <data name="EmailError" xml:space="preserve">
    <value>Failed to send email.</value>
  </data>
</root>